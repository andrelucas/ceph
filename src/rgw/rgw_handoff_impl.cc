/**
 * @file rgw_handoff_impl.cc
 * @author Andr√© Lucas (alucas@akamai.com)
 * @brief Implementation for rgw::HandoffHelperImpl.
 * @version 0.1
 * @date 2023-11-10
 *
 * @copyright Copyright (c) 2023
 *
 * PIMPL implementation class for HandoffHelper.
 *
 * HandoffHelper simply wraps HandoffHelperImpl.
 *
 * Exists because HandoffHelper is created in rgw_rest_s3.cc, so has to be
 * #include'd. The include ends up being transient (via rgw_rest_s3.h), so we
 * end up including all the gRPC headers for almost every file. This makes it
 * slower, and breaks some stuff.
 *
 * Also it has the usual PIMPL benefits - making small changes here doesn't
 * transitively cause mass rebuilds, even if we change our header file.
 */

/* References:
 *
 * AWS Signature Version 4 documentation:
 * https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html
 *
 * AWS Signature Version 2 documentation:
 * https://docs.aws.amazon.com/AmazonS3/latest/userguide/auth-request-sig-v2.html
 */

#include "rgw_handoff_impl.h"

#include <boost/algorithm/string.hpp>
#include <boost/container/flat_map.hpp>
#include <cerrno>
#include <cstring>
#include <fmt/format.h>
#include <fmt/printf.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/util/json_util.h>
#include <google/protobuf/util/time_util.h>
#include <iostream>
#include <mutex>
#include <optional>
#include <rgw_handoff.h>
#include <string>
#include <string_view>

#include <time.h>

#include "absl/strings/numbers.h"
#include "absl/time/time.h"
#include "authenticator/v1/authenticator.pb.h"
#include "authorizer/v1/authorizer.pb.h"

#include "common/dout.h"
#include "include/ceph_assert.h"
#include "rgw/rgw_client_io.h"
#include "rgw/rgw_common.h"

// These are 'standard' protobufs for the 'Richer error model'
// (https://grpc.io/docs/guides/error/).
#include "google/rpc/error_details.pb.h"
#include "google/rpc/status.pb.h"
#include "rgw_handoff_grpcutil.h"
#include "rgw_op.h"

#define dout_context g_ceph_context
#define dout_subsys ceph_subsys_rgw

#pragma clang diagnostic error "-Wsign-conversion"
#pragma GCC diagnostic error "-Wsign-conversion"

namespace ba = boost::algorithm;

namespace rgw {

/****************************************************************************/

/**
 * @brief Construct a new AuthorizationParameters object from an in-flight
 * request.
 *
 * Given a request, read the parameters required for an authorization-enhanced
 * request to the Authenticator.
 *
 * The HTTP method, the bucket name, and optionally the object key name will
 * be extracted from the HTTP request parameters.
 *
 * In practice this amounts to an early invocation of parts of
 * RGWHandler_Lib::init_from_header(), where we need some of this information
 * in order to properly authenticate the request.
 *
 * Doing work on an unauthenticated request is risky. It introduces potential
 * security problems. For example, we've done nothing to validate the bucket
 * and object key names yet, though they will at least have been URL decoded.
 *
 * @param dpp DoutPrefixProvider.
 * @param s The request (const).
 */
AuthorizationParameters::AuthorizationParameters(const DoutPrefixProvider* dpp_in, const req_state* s) noexcept
{
  HandoffDoutPrefixPipe hdpp(*dpp_in, "AuthorizationParameters");
  auto dpp = &hdpp;
  valid_ = false;

  ceph_assert(s != nullptr); // Give a helpful error to unit tests.

  // Method should be set in the request.
  if (!s->info.method || *(s->info.method) == 0) {
    ldpp_dout(dpp, 0) << "Invalid request method" << dendl;
    return;
  }
  method_ = s->info.method;

  std::string req;
  std::string first;
  const char* req_name = s->relative_uri.c_str();

  // We expect the request portion including parameters, starting with the
  // leading slash. If it's not, we need to abort as the request is malformed.
  if (*req_name != '/') {
    ldpp_dout(dpp, 0) << "Invalid relative_uri string" << dendl;
    return;
  }
  req_name++;

  // Save all the HTTP headers starting with 'x_amz_'. Do this before the
  // first valid exit.
  ceph_assert(s->cio != nullptr); // Give a helpful error to unit tests.
  for (const auto& kv : s->cio->get_env().get_map()) {
    std::string key = kv.first;
    // HTTP headers are uppercased and have hyphens replaced with underscores.
    if (ba::starts_with(key, "HTTP_X_AMZ_")) {
      key = key.substr(5);
      ba::replace_all(key, "_", "-");
      ba::to_lower(key);
      http_headers_.emplace(key, kv.second);
    }
  }

  // This is the path element of the URI, up to the '?'.
  http_request_path_ = s->info.request_uri;

  // Save all the HTTP URI query parameters. Do this before the first valid
  // exit.
  for (const auto& kv : s->info.args.get_params()) {
    http_query_params_.emplace(kv.first, kv.second);
  }

  // An empty request portion isn't that useful to authorization, but is valid
  // in general use - it's generated by e.g. 's3cmd ls' with no options. We'll
  // return an object that has very little information, but _is_ valid.
  //
  if (*req_name == 0) {
    ldpp_dout(dpp, 0) << "No query string information available" << dendl;
    valid_ = true;
    return;
  }

  // We're relying on the first parameter being the bucket name, even if the
  // original URL is of the form http://bucket.host.name/objectkey (as is
  // preferred by s3cmd).
  //
  // This canonicalisation step is performed by RGWREST::preprocess(), in
  // v17.2.6 it's in rgw_rest.cc near line 2152: If the domain name appears to
  // be a prefix on a name we recognise (e.g. bucket.host.name for a server
  // with name host.name), we prepend "bucket" to the list of parameters.
  //
  // This is super helpful as it means we don't have to handle the special
  // case.

  req = std::string(req_name);
  size_t pos = req.find('/');
  if (pos != std::string::npos) {
    bucket_name_ = req.substr(0, pos);
  } else {
    bucket_name_ = req;
  }

  // The object key name can legitimately be empty.
  if (pos != std::string::npos && req.size() > pos) {
    object_key_name_ = req.substr(pos + 1);
  }

  valid_ = true;
}

std::string AuthorizationParameters::to_string() const noexcept
{
  if (!valid()) {
    return "AuthorizationParameters(INVALID)";

  } else {
    std::string hdr;
    if (http_headers_.empty()) {
      hdr = "none";
    } else {
      std::vector<std::string> h;
      for (const auto& kv : http_headers_) {
        h.emplace_back(fmt::format(FMT_STRING("{}={},"), kv.first, kv.second));
      }
      hdr = fmt::format(FMT_STRING("[{}]"), fmt::join(h, ","));
    }
    std::string qparam;
    if (http_query_params_.empty()) {
      qparam = "none";
    } else {
      std::vector<std::string> q;
      for (const auto& kv : http_query_params_) {
        q.emplace_back(fmt::format(FMT_STRING("{}={}"), kv.first, kv.second));
      }
      qparam = fmt::format(FMT_STRING("[{}]"), fmt::join(q, ","));
    }
    return fmt::format(
        FMT_STRING("AuthorizationParameters(method={},bucket={},key_present={},request_path={},http_headers={},query_param={})"),
        method(),
        bucket_name(),
        object_key_name().empty() ? "false" : "true",
        http_request_path(),
        hdr,
        qparam);
  }
}

std::ostream& operator<<(std::ostream& os, const AuthorizationParameters& ep)
{
  os << ep.to_string();
  return os;
}

/****************************************************************************/

/****************************************************************************
 *
 * AuthServiceClient - gRPC client wrapper for rgw/auth/v1/AuthService.
 *
 ****************************************************************************/

HandoffAuthResult AuthServiceClient::Auth(const AuthenticateRESTRequest& req, const HandoffAuthzState* authz_state)
{
  ::grpc::ClientContext context;
  AuthenticateRESTResponse resp;

  ::grpc::Status status = stub_->AuthenticateREST(&context, req, &resp);

  using namespace authenticator::v1;

  if (status.ok()) {
    if (authz_state) {
      // HandoffAuthzState.set_authenticator_id_fields() is contrived to allow
      // us to punch non-const through the const pointer passed. This is
      // necessary because the authentication APIs pass a const req_state*,
      // and the HandoffAuthzState we care about is a member field.
      //
      authz_state->set_authenticator_id_fields(
          resp.canonical_user_id(), resp.user_arn(),
          resp.assuming_user_arn(), resp.account_arn());
    }
    return HandoffAuthResult(resp.canonical_user_id(), status.error_message());
  }
  // Error conditions are returned via the Richer error model
  // (https://grpc.io/docs/guides/error/). Create a google::rpc::Status
  // message.
  auto error_details = status.error_details();
  if (error_details.empty()) {
    // There are no error details, so there can't be an S3ErrorDetails
    // message, so we assume this is related to the RPC itself, not the
    // authentication. This gets a TRANSPORT_ERROR.
    return HandoffAuthResult(EACCES, status.error_message(),
        HandoffAuthResult::error_type::TRANSPORT_ERROR);
  }
  ::google::rpc::Status s;
  if (!s.ParseFromString(error_details)) {
    return HandoffAuthResult(
        EACCES,
        "failed to deserialize gRPC error_details, error message follows: " + status.error_message(),
        HandoffAuthResult::error_type::INTERNAL_ERROR);
  }
  // Loop through the detail field (repeated Any) and look for our
  // S3ErrorDetails message.
  for (auto& detail : s.details()) {
    authenticator::v1::S3ErrorDetails s3_details;
    if (detail.UnpackTo(&s3_details)) {
      return _translate_authenticator_error_code(s3_details.type(), s3_details.http_status_code(), status.error_message());
    }
  }
  // There was no S3ErrorDetails message, so assume the error was related to
  // the RPC itself, not the authentication, and that in some future version
  // of gRPC the transport errors use the Richer error model. (Stranger things
  // have happened.) This gets a TRANSPORT_ERROR, as above.
  return HandoffAuthResult(EACCES,
      "S3ErrorDetails not found, error message follows: " + status.error_message(),
      HandoffAuthResult::error_type::TRANSPORT_ERROR);
}

AuthServiceClient::GetSigningKeyResult
AuthServiceClient::GetSigningKey(const GetSigningKeyRequest req)
{
  ::grpc::ClientContext context;
  GetSigningKeyResponse resp;

  ::grpc::Status status = stub_->GetSigningKey(&context, req, &resp);
  if (status.ok()) {
    auto key = resp.signing_key();
    std::vector<uint8_t> kvec;
    std::copy(key.begin(), key.end(), std::back_inserter(kvec));
    return GetSigningKeyResult(kvec);
  }
  return GetSigningKeyResult(status.error_message());
}

using err_type = ::authenticator::v1::S3ErrorDetails_Type;

static std::map<err_type, unsigned int> auth_map = {
  { err_type::S3ErrorDetails_Type_TYPE_ACCESS_DENIED, EACCES },
  { err_type::S3ErrorDetails_Type_TYPE_AUTHORIZATION_HEADER_MALFORMED,
      ERR_INVALID_REQUEST },
  { err_type::S3ErrorDetails_Type_TYPE_EXPIRED_TOKEN, EACCES },
  { err_type::S3ErrorDetails_Type_TYPE_INTERNAL_ERROR, ERR_INTERNAL_ERROR },
  { err_type::S3ErrorDetails_Type_TYPE_INVALID_ACCESS_KEY_ID,
      ERR_INVALID_ACCESS_KEY },
  { err_type::S3ErrorDetails_Type_TYPE_INVALID_REQUEST, EINVAL },
  { err_type::S3ErrorDetails_Type_TYPE_INVALID_SECURITY, EINVAL },
  { err_type::S3ErrorDetails_Type_TYPE_INVALID_TOKEN,
      ERR_INVALID_IDENTITY_TOKEN },
  { err_type::S3ErrorDetails_Type_TYPE_INVALID_URI, ERR_INVALID_REQUEST },
  { err_type::S3ErrorDetails_Type_TYPE_METHOD_NOT_ALLOWED,
      ERR_METHOD_NOT_ALLOWED },
  { err_type::S3ErrorDetails_Type_TYPE_MISSING_SECURITY_HEADER,
      ERR_INVALID_REQUEST },
  { err_type::S3ErrorDetails_Type_TYPE_REQUEST_TIME_TOO_SKEWED,
      ERR_REQUEST_TIME_SKEWED },
  { err_type::S3ErrorDetails_Type_TYPE_SIGNATURE_DOES_NOT_MATCH,
      ERR_SIGNATURE_NO_MATCH },
  { err_type::S3ErrorDetails_Type_TYPE_TOKEN_REFRESH_REQUIRED,
      ERR_INVALID_REQUEST }
};

HandoffAuthResult AuthServiceClient::_translate_authenticator_error_code(
    ::authenticator::v1::S3ErrorDetails_Type auth_type,
    int32_t auth_http_status_code,
    const std::string& message)
{
  auto srch = auth_map.find(auth_type);
  if (srch != auth_map.end()) {
    // Return an entry in the map directly.
    return HandoffAuthResult(srch->second, message, HandoffAuthResult::error_type::AUTH_ERROR);
  } else {
    // With no direct mapping, return an RGW error with the HTTP status code
    // indicated by the Authenticator. This is far from perfect; we're not
    // giving the user a good experience here but we need to return something.
    //
    switch (auth_http_status_code) {
    case 400:
      return HandoffAuthResult(EINVAL, message, HandoffAuthResult::error_type::AUTH_ERROR);
    case 404:
      return HandoffAuthResult(ERR_NOT_FOUND, message, HandoffAuthResult::error_type::AUTH_ERROR);
    case 403:
    default:
      return HandoffAuthResult(EACCES, message, HandoffAuthResult::error_type::AUTH_ERROR);
    }
  }
}

/****************************************************************************/

/**
 * @brief Create an AWS v2 authorization header from the request's URL
 * parameters.
 *
 * The v2 header form is generated by `s3cmd signurl` and `aws s3 presign`
 * when either no region is provided, or the region is us-east-1. It is
 * simply:
 *
 * ```
 *   AWS <accesskeyid>:<signature>
 * ```
 *
 * Everything else required to check the signature will be provided to the
 * Authenticator in StringToSign.
 *
 * @param dpp DoutPrefixProvider.
 * @param s The request state.
 * @return std::optional<std::string> On failure, std::nullopt. On success,
 * the value for the Authorization: header.
 */
static std::optional<std::string> synthesize_v2_header(const DoutPrefixProvider* dpp, const req_state* s)
{
  auto& infomap = s->info.args;
  auto maybe_credential = infomap.get_optional("AWSAccessKeyId");
  if (!maybe_credential) {
    ldpp_dout(dpp, 0) << "Missing AWSAccessKeyId parameter" << dendl;
  }
  auto maybe_signature = infomap.get_optional("Signature");
  if (!maybe_signature) {
    ldpp_dout(dpp, 0) << "Missing Signature parameter" << dendl;
  }
  if (!(maybe_credential && maybe_signature)) {
    return std::nullopt;
  }
  return std::make_optional(fmt::format("AWS {}:{}",
      *maybe_credential, *maybe_signature));
}

/**
 * @brief Create an AWS v4 authorization header from the request's URL
 * parameters.
 *
 * The V4 header form required the (long) credentials:
 *
 * ```
 *    <accesskeyid>/<region>/s3/aws_request
 * ```
 *
 * The SignedHeaders value, and the Signature value. These are formatted into:
 *
 * ```
 *    AWS4-HMAC-SHA256 Credential=<credentials>, SignedHeaders=<signedheader>, Signature=<signature>
 * ```
 *
 * We don't support signature v4A (ECDSA) at this time.
 *
 * @param dpp DoutPrefixProvider.
 * @param s The request state.
 * @return std::optional<std::string> On failure, std::nullopt. On success,
 * the value for the Authorization: header.
 */
static std::optional<std::string> synthesize_v4_header(const DoutPrefixProvider* dpp, const req_state* s)
{
  auto& infomap = s->info.args;

  // Params starting with 'X-Amz' are lowercased.
  auto maybe_credential = infomap.get_optional("x-amz-credential");
  if (!maybe_credential) {
    ldpp_dout(dpp, 0) << "Missing x-amz-credential parameter" << dendl;
  }
  auto maybe_signedheaders = infomap.get_optional("x-amz-signedheaders");
  if (!maybe_signedheaders) {
    ldpp_dout(dpp, 0) << "Missing x-amz-signedheaders parameter" << dendl;
  }
  auto maybe_signature = infomap.get_optional("x-amz-signature");
  if (!maybe_signature) {
    ldpp_dout(dpp, 0) << "Missing x-amz-signature parameter" << dendl;
  }
  if (!(maybe_credential && maybe_signedheaders && maybe_signature)) {
    return std::nullopt;
  }
  return std::make_optional(fmt::format("AWS4-HMAC-SHA256 Credential={}, SignedHeaders={}, Signature={}",
      *maybe_credential, *maybe_signedheaders, *maybe_signature));
}

/****************************************************************************
 *
 * HandoffHelperImpl
 *
 ****************************************************************************/

int HandoffHelperImpl::init(CephContext* const cct, rgw::sal::Driver* store, const std::string& grpc_uri, const std::string& authz_grpc_uri)
{
  store_ = store;

  ceph_assert(cct != nullptr);
  config_obs_.init(cct);

  // Set up some state variables based on configuration. Most of these are not
  // runtime-alterable.

  ldout(cct, 1) << "HandoffHelperImpl::init()" << dendl;
  grpc_mode_ = true;
  disable_local_authorization_ = cct->_conf->rgw_handoff_authz_disable_local;
  ldout(cct, 1)
      << fmt::format(FMT_STRING("HandoffHelperImpl::init(): NOTE: local authorization {}"),
             (disable_local_authorization_ ? "DISABLED" : "ENABLED"))
      << dendl;
  reject_filtered_commands_ = cct->_conf->rgw_handoff_authz_reject_filtered_commands;
  ldout(cct, 1)
      << fmt::format(FMT_STRING("HandoffHelperImpl::init(): reject filtered commands {}"),
             (reject_filtered_commands_ ? "ENABLED" : "DISABLED"))
      << dendl;
  allow_native_copy_object_ = cct->_conf->rgw_handoff_authz_allow_native_copy_object;
  ldout(cct, 1) << fmt::format(FMT_STRING("HandoffHelperImpl::init(): Cluster-local copy-object is {}"),
      (allow_native_copy_object_ ? "ENABLED" : "DISABLED"))
                << dendl;

  // Production calls to this function will have grpc_uri empty, so we'll
  // fetch configuration. Unit tests will pass a URI.
  auto authn_uri = grpc_uri.empty() ? cct->_conf->rgw_handoff_grpc_uri : grpc_uri;

  // Will use rgw_handoff_grpc_uri, which is runtime-alterable.
  // set_channel_uri() will fetch default channel args if none have been set
  // beforehand.
  if (!get_authn_channel().set_channel_uri(cct, authn_uri)) {
    // This is unlikely, but no gRPC channel in gRPC mode is a fatal error.
    // Note that this won't attempt to connect! That's done lazily on first
    // use. This will just attempt to create the channel object.
    throw new std::runtime_error(fmt::format(FMT_STRING("Failed to create initial authentication gRPC channel for uri '{}'"), authn_uri));
  }

  // Likewise, production calls will have authz_grpc_uri empty, so we'll fetch
  // configuration. Unit tests will pass a URI.
  auto authz_uri = authz_grpc_uri.empty() ? cct->_conf->rgw_handoff_authz_grpc_uri : authz_grpc_uri;

  // Will use rgw_handoff_authz_grpc_uri, which is runtime-alterable.
  // set_channel_uri() will fetch default channel args if none have been set
  // beforehand.
  if (!get_authz_channel().set_channel_uri(cct, authz_uri)) {
    // This is unlikely, but no gRPC channel in gRPC mode is a fatal error.
    // Note that this won't attempt to connect! That's done lazily on first
    // use. This will just attempt to create the channel object.
    throw new std::runtime_error(fmt::format(FMT_STRING("Failed to create initial authorization gRPC channel for uri '{}'"), authz_uri));
  }

  // rgw_handoff_enable_presigned_expiry_check is not runtime-alterable.
  presigned_expiry_check_ = cct->_conf->rgw_handoff_enable_presigned_expiry_check;
  ldout(cct, 5)
      << fmt::format(
             FMT_STRING(
                 "HandoffHelperImpl::init(): Presigned URL expiry check {}"),
             (presigned_expiry_check_ ? "enabled" : "disabled"))
      << dendl;

  // rgw_handoff_enable_signature_v2 is runtime-alterable.
  set_signature_v2(cct, cct->_conf->rgw_handoff_enable_signature_v2);

  // rgw_handoff_enable_chunked_upload is runtime-alterable.
  set_chunked_upload_mode(cct, cct->_conf->rgw_handoff_enable_chunked_upload);

  // The authparam mode is runtime-alterable.
  set_authorization_mode(cct, config_obs_.get_authorization_mode(cct->_conf));

  return 0; // Return value is ignored.
}

void HandoffHelperImpl::set_signature_v2(CephContext* const cct, bool enabled)
{
  ldout(cct, 1) << fmt::format(FMT_STRING("HandoffHelperImpl: set_signature_v2({})"), (enabled ? "true" : "false")) << dendl;
  std::unique_lock<std::shared_mutex> g(m_config_);
  enable_signature_v2_ = enabled;
}

void HandoffHelperImpl::set_chunked_upload_mode(CephContext* const cct, bool enabled)
{
  ldout(cct, 1) << fmt::format(FMT_STRING("HandoffHelperImpl::set_chunked_upload_mode({})"), (enabled ? "true" : "false")) << dendl;
  std::unique_lock<std::shared_mutex> g(m_config_);
  enable_chunked_upload_ = enabled;
}

void HandoffHelperImpl::set_anonymous_authorization(CephContext* const cct, bool enabled)
{
  ldout(cct, 1) << fmt::format(FMT_STRING("HandoffHelperImpl::set_anonymous_authorization({})"), (enabled ? "true" : "false")) << dendl;
  std::unique_lock<std::shared_mutex> g(m_config_);
  enable_anonymous_authorization_ = enabled;
}

bool HandoffHelperImpl::anonymous_authorization_enabled() const
{
  std::shared_lock<std::shared_mutex> g(m_config_);
  return enable_anonymous_authorization_;
}

std::optional<std::string> HandoffHelperImpl::synthesize_auth_header(
    const DoutPrefixProvider* dpp,
    const req_state* s)
{
  if (s->info.args.exists("AWSAccessKeyId")) {
    return synthesize_v2_header(dpp, s);
  }
  // Params starting with 'X-Amz' are lowercased.
  if (s->info.args.exists("x-amz-credential")) {
    return synthesize_v4_header(dpp, s);
  }
  return std::nullopt;
}

/**
 * @brief Return a string representation of an AuthorizationMode enum value.
 *
 * @param mode the Authorization mode.
 * @return std::string A string representation of \p mode.
 */
static std::string authorization_mode_to_string(AuthParamMode mode)
{
  switch (mode) {
  case AuthParamMode::ALWAYS:
    return "ALWAYS";
  case AuthParamMode::WITHTOKEN:
    return "WITHTOKEN";
  case AuthParamMode::NEVER:
    return "NEVER";
  }
  return "UNKNOWN";
}

void HandoffHelperImpl::set_authorization_mode(CephContext* const cct, AuthParamMode mode)
{
  std::unique_lock<std::shared_mutex> g(m_config_);
  ldout(cct, 1) << fmt::format(FMT_STRING("HandoffHelperImpl: set_authorization_mode({})"), authorization_mode_to_string(mode)) << dendl;
  authorization_mode_ = mode;
}

/**
 * @brief Deduce the AWS V4 presigned URL expiry time.
 *
 * The V4 expiry calculation is more complex than V2. The request time is
 * provided in the x-amz-date parameter, and the expiry time delta is provided
 * in the x-amz-expires parameter. We have to parse the x-amz-date string into
 * a time, then add the delta to get the expiry time.
 *
 * @param dpp DoutPrefixProvider.
 * @param s The request.
 * @return std::optional<time_t> The expiry time as a time_t value, or nullopt
 * if the value could not be deduced.
 */
static std::optional<time_t> get_v4_presigned_expiry_time(const DoutPrefixProvider* dpp, const req_state* s) noexcept
{
  auto& argmap = s->info.args;
  auto maybe_date = argmap.get_optional("x-amz-date");
  if (!maybe_date) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}:  Missing x-amz-date parameter"), __func__) << dendl;
  }
  auto maybe_expires_delta = argmap.get_optional("x-amz-expires");
  if (!maybe_expires_delta) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: Missing x-amz-expires parameter"), __func__) << dendl;
  }
  if (!(maybe_date && maybe_expires_delta)) {
    return std::nullopt;
  }

  std::string date = std::move(*maybe_date);
  std::string delta = std::move(*maybe_expires_delta);

  absl::Time param_time;
  std::string err;
  // absl::ParseTime()'s format has some extensions to strftime(3). The %E4Y is
  // a 4-digit year, %ET is the 'T' separator, and %Ez is the timezone spec
  // which in Abseil can be the 'Z' indicating UTC.
  if (!absl::ParseTime("%E4Y%m%d%ET%H%M%S%Ez", date, &param_time, &err)) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: Failed to parse x-amz-date time '{}': {}"), __func__, date, err) << dendl;
    return std::nullopt;
  }
  int delta_seconds = 0;
  if (!absl::SimpleAtoi(delta, &delta_seconds)) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: Failed to parse int from x-amz-expires='{}'"), __func__, delta) << dendl;
  }
  auto expiry_time = param_time + absl::Seconds(delta_seconds);
  auto expiry = absl::ToTimeT(expiry_time);
  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: x-amz-date {}, delta {} -> expiry time {}"), __func__, date, delta, expiry) << dendl;
  return std::make_optional(expiry);
}

/**
 * @brief Extract the AWS V2 presigned URL expiry time.
 *
 * V2 expiry times are really straightforward - they're just a UNIX timestamp
 * after which the request is invalid.
 *
 * @param dpp DoutPrefixProvider.
 * @param s The request.
 * @return std::optional<time_t> The expiry time as a time_t value, or nullopt
 * if the value could not be extracted.
 */
static std::optional<time_t> get_v2_presigned_expiry_time(const DoutPrefixProvider* dpp, const req_state* s) noexcept
{
  auto& argmap = s->info.args;
  auto maybe_expires = argmap.get_optional("Expires");
  if (!maybe_expires) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: Missing Expires parameter"), __func__) << dendl;
    return std::nullopt;
  }

  auto expiry_time_str = std::move(*maybe_expires);
  time_t expiry_time;
  if (!absl::SimpleAtoi(expiry_time_str, &expiry_time)) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("Failed to parse int from Expires='{}'"), __func__, expiry_time_str) << dendl;
    return std::nullopt;
  }
  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: expiry time "), __func__, expiry_time) << dendl;
  return std::make_optional(expiry_time);
}

bool HandoffHelperImpl::valid_presigned_time(const DoutPrefixProvider* dpp, const req_state* s, time_t now)
{
  std::optional<time_t> maybe_expiry_time;

  auto& argmap = s->info.args;
  if (argmap.exists("AWSAccessKeyId")) {
    maybe_expiry_time = get_v2_presigned_expiry_time(dpp, s);
  } else if (argmap.exists("x-amz-credential")) {
    maybe_expiry_time = get_v4_presigned_expiry_time(dpp, s);
  }
  if (!maybe_expiry_time) {
    ldpp_dout(dpp, 0) << "Unable to extract presigned URL expiry time from query parameters" << dendl;
    return false;
  }
  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("Presigned URL last valid second {} now {}"), *maybe_expiry_time, now) << dendl;
  if (*maybe_expiry_time < now) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("Presigned URL expired - last valid second {} now {}"), *maybe_expiry_time, now) << dendl;
    return false;
  }
  return true;
}

/**
 * @brief For a given HTTP method in string form ("GET", "POST", etc.) return
 * the corresponding request HTTPMethod enum value.
 *
 * This is used to map the request type we get from RGW onto the enum the API
 * expects.
 *
 * @param method The HTTP method as a string view.
 * @return authenticator::v1::AuthenticateRESTRequest::HTTPMethod the enum
 * value, or ...HTTP_METHOD_UNSPECIFIED if the method is not recognised.
 */
static authenticator::v1::AuthenticateRESTRequest::HTTPMethod method_to_reqmethod(const std::string_view& method)
{
  if (method == "GET") {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_GET;
  } else if (method == "PUT") {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_PUT;
  } else if (method == "POST") {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_POST;
  } else if (method == "DELETE") {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_DELETE;
  } else if (method == "HEAD") {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_HEAD;
  } else {
    return AuthenticateRESTRequest_HTTPMethod_HTTP_METHOD_UNSPECIFIED;
  }
}

HandoffAuthResult HandoffHelperImpl::auth(const DoutPrefixProvider* dpp_in,
    const std::string_view& session_token,
    const std::string_view& access_key_id,
    const std::string_view& string_to_sign,
    const std::string_view& signature,
    const req_state* const s,
    optional_yield y)
{
  // Construct a custom log prefix provider with some per-request state
  // information. This should make it easier to correlate logs on busy
  // servers.
  HandoffDoutStateProvider hdpp(*dpp_in, s);
  // All the APIs expect a *DoutPrefixProvider.
  auto dpp = &hdpp;

  ceph_assert(s->cio != nullptr); // Give a helpful message to unit tests.

  ldpp_dout(dpp, 1) << fmt::format(FMT_STRING(
                                       "init: access_key_id='{}' session_token_present={} decoded_uri='{}' domain={}"),
      access_key_id,
      session_token.empty() ? "false" : "true",
      s->decoded_uri,
      s->info.domain)
                    << dendl;

  // The 'environment' of the request includes, amongst other things,
  // all the headers, prefixed with 'HTTP_'. They also have header names
  // uppercased and with underscores instead of hyphens.
  auto envmap = s->cio->get_env().get_map();

  // Make sure runtime configuration is defined throughout this method.
  std::shared_lock<std::shared_mutex> g(m_config_);

  // Retrieve the Authorization header if present. Otherwise, attempt to
  // synthesize one from the provided query parameters.
  std::string auth;
  bool is_presigned_request = false;
  auto srch = envmap.find("HTTP_AUTHORIZATION");
  if (srch != envmap.end()) {
    auth = srch->second;
    ldpp_dout(dpp, 20) << "Authorization=" << auth << dendl;

  } else {
    // Attempt to create an Authorization header using query parameters.
    auto maybe_auth = synthesize_auth_header(dpp, s);
    if (maybe_auth) {
      auth = std::move(*maybe_auth);
      ldpp_dout(dpp, 20) << "Synthesized Authorization=" << auth << dendl;
    } else {
      ldpp_dout(dpp, 0) << "Missing Authorization header and insufficient query parameters" << dendl;
      return HandoffAuthResult(EACCES, "Internal error (missing Authorization "
                                       "and insufficient query parameters)");
    }
    if (presigned_expiry_check_) {
      // Belt-and-braces: Check the expiry time. Note that RGW won't (in
      // v17.2.6) pass this to authenticate() (and so auth()); it checks the
      // expiry time early. Let's not assume things.
      if (!valid_presigned_time(dpp, s, time(nullptr))) {
        ldpp_dout(dpp, 0) << "Presigned URL expiry check failed" << dendl;
        return HandoffAuthResult(EACCES, "Presigned URL expiry check failed");
      }
    }
    // This flag is needed by _grpc_auth() so we can properly set the
    // skip_timestamp_validation flag in the request.
    is_presigned_request = true;
  }

  // We might have disabled V2 signatures.
  if (!enable_signature_v2_) {
    if (ba::starts_with(auth, "AWS ")) {
      ldpp_dout(dpp, 0) << "V2 signatures are disabled, returning failure" << dendl;
      return HandoffAuthResult(EACCES,
          "Access denied (V2 signatures disabled)");
    }
  }

  std::optional<AuthorizationParameters> authorization_param;

  // The user can control when we send authorization parameters. Making it
  // runtime configurable makes it trivial to eliminate this feature as a
  // cause of performance problems.
  //
  if (authorization_mode_ == AuthParamMode::ALWAYS || (authorization_mode_ == AuthParamMode::WITHTOKEN && !session_token.empty())) {
    authorization_param = AuthorizationParameters(dpp, s);
    // Log the result. It's safe to dereference the optional, as the constructor
    // always returns an object (though it may be invalid w.r.t. its valid()
    // method).
    ldpp_dout(dpp, 20) << *authorization_param << dendl;

    if (!(authorization_param->valid())) {
      // This shouldn't happen with a valid request. If it does, log it and
      // re-nullopt the authorization parameters.
      ldpp_dout(dpp, 0) << "AuthorizationParameters not available" << dendl;
      authorization_param = std::nullopt;
    }
  }

  // Determine if we're a chunked upload. The spec
  // (https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-streaming.html)
  // says that we have to set the content-encoding: HTTP header, but the only
  // client I can find (minio go) doesn't set it. We won't depend on it.
  //
  bool is_chunked = false;

  auto aws_content = envmap.find("HTTP_X_AMZ_CONTENT_SHA256");
  if (aws_content != envmap.cend()) {
    if (aws_content->second == "STREAMING-AWS4-HMAC-SHA256-PAYLOAD") {
      is_chunked = true;
      ldpp_dout(dpp, 5) << "chunked upload in progress" << dendl;
    }
  }

  if (is_chunked && !enable_chunked_upload_) {
    ldpp_dout(dpp, 5) << "chunked upload disabled - rejecting request" << dendl;
    return HandoffAuthResult(EACCES, "chunked upload is disabled");
  }

  // Perform the gRPC-specific parts of the auth* call.
  auto result = _grpc_auth(dpp, auth, authorization_param, session_token, access_key_id,
      string_to_sign, signature, s, y, is_presigned_request);

  if (result.is_err()) {
    return result;
  }
  // If we're chunked, we need a signing key from the Authenticator.
  if (!is_chunked) {
    return result;
  } else {
    auto sk = get_signing_key(dpp, auth, s, y);
    if (!sk.has_value()) {
      ldpp_dout(dpp, 0) << "failed to fetch signing key for chunked upload"
                        << dendl;
      return HandoffAuthResult(
          EACCES, "failed to fetch signing key for chunked upload");
    }
    result.set_signing_key(*sk);
    ldpp_dout(dpp, 10) << "chunked upload signing key saved" << dendl;
    return result;
  }
};

HandoffAuthResult HandoffHelperImpl::_grpc_auth(
    const DoutPrefixProvider* dpp_in, const std::string& auth,
    const std::optional<AuthorizationParameters>& authorization_param,
    [[maybe_unused]] const std::string_view& session_token,
    const std::string_view& access_key_id,
    const std::string_view& string_to_sign, const std::string_view& signature,
    [[maybe_unused]] const req_state* const s,
    [[maybe_unused]] optional_yield y, bool is_presigned_request)
{
  HandoffDoutPrefixPipe hdpp(*dpp_in, "grpc_auth");
  auto dpp = &hdpp;

  authenticator::v1::AuthenticateRESTRequest req;
  // Fill in the request protobuf. Seem to have to create strings from
  // string_view, which is a shame.
  req.set_transaction_id(s->trans_id);
  req.set_string_to_sign(std::string { string_to_sign });
  req.set_authorization_header(auth);
  // If we synthesised the Authorization header, we need to set this flag so
  // that the Authenticator doesn't re-check the times. This is a special
  // request from the Authenticator team. Note that this isn't a security
  // problem, as RGW will have already checked the expiry time!
  if (is_presigned_request) {
    req.set_skip_timestamp_validation(true);
  }

  // If we got authorization parameters, fill them in.
  if (authorization_param) {
    req.set_http_method(method_to_reqmethod(authorization_param->method()));
    if (!authorization_param->bucket_name().empty()) {
      req.set_bucket_name(authorization_param->bucket_name());
    }
    if (!authorization_param->object_key_name().empty()) {
      req.set_object_key(authorization_param->object_key_name());
    }

    const auto headers = authorization_param->http_headers();
    if (headers.size() > 0) {
      auto req_headers = req.mutable_x_amz_headers();
      for (const auto& kv : headers) {
        req_headers->insert({ kv.first, kv.second });
      }
    }

    const auto query_params = authorization_param->http_query_params();
    if (query_params.size() > 0) {
      auto req_query_params = req.mutable_query_parameters();
      for (const auto& kv : query_params) {
        req_query_params->insert({ kv.first, kv.second });
      }
    }
  }

  // Get the gRPC client from under the channel lock. Hold the lock for as
  // short a time as possible.
  AuthServiceClient client {}; // Uninitialised variant - must call set_stub().
  {
    auto new_channel = get_authn_channel().get_channel();
    if (!new_channel) {
      ldpp_dout(dpp, 0) << "Unset gRPC channel" << dendl;
      return HandoffAuthResult(EACCES, "Internal error (gRPC channel not set)");
    }
    client.set_stub(new_channel);
  }
  ldpp_dout(dpp, 1) << "Sending gRPC auth request" << dendl;

  // Note that we're passing s->handoff_authz as a naked pointer. Auth()
  // checks for nullptr so this is safe.
  auto result = client.Auth(req, s->handoff_authz.get());

  // The client returns a fully-populated HandoffAuthResult, but we want to
  // issue some helpful log messages before returning it.
  if (result.is_ok()) {
    std::string authz_info;
    if (s->handoff_authz.get()) {
      std::string aua;
      if (s->handoff_authz->assuming_user_arn()) {
        aua = s->handoff_authz->assuming_user_arn().value();
      } else {
        aua = "None";
      }
      authz_info = fmt::format(FMT_STRING(" authz (canonical_user_id={}, user_arn={}, "
                                          "assuming_user_arn={}, account_arn={})"),
          s->handoff_authz->canonical_user_id(), s->handoff_authz->user_arn(),
          aua, s->handoff_authz->account_arn());
    }
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("success (access_key_id='{}', uid='{}'){}"),
        access_key_id, result.userid(), authz_info)
                      << dendl;
  } else {
    if (result.err_type() == HandoffAuthResult::error_type::TRANSPORT_ERROR) {
      ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("authentication attempt failed: {}"), result.message()) << dendl;
    } else {
      ldpp_dout(dpp, 0) << fmt::format(
          FMT_STRING("Authentication service returned failure (access_key_id='{}', code={}, message='{}')"),
          access_key_id, result.code(), result.message())
                        << dendl;
    }
  }

  return result;
}

HandoffAuthResult HandoffHelperImpl::anonymous_authorize(const DoutPrefixProvider* dpp_in,
    const req_state* const s,
    optional_yield y)
{
  // Construct a custom log prefix provider with some per-request state
  // information. This should make it easier to correlate logs on busy
  // servers.
  HandoffDoutStateProvider hdpp(*dpp_in, s);
  // All the APIs expect a *DoutPrefixProvider.
  auto dpp = &hdpp;

  ceph_assert(s->cio != nullptr); // Give a helpful message to unit tests.

  ldpp_dout(dpp, 1) << fmt::format(FMT_STRING(
                                       "anonymous_authorize(): decoded_uri='{}' domain={}"),
      s->decoded_uri, s->info.domain)
                    << dendl;

  // Make sure runtime configuration is defined throughout this method.
  std::shared_lock<std::shared_mutex> g(m_config_);

  std::optional<AuthorizationParameters> authorization_param;

  authorization_param = AuthorizationParameters(dpp, s);
  // Log the result. It's safe to dereference the optional, as the constructor
  // always returns an object (though it may be invalid w.r.t. its valid()
  // method).
  ldpp_dout(dpp, 20) << *authorization_param << dendl;

  if (!(authorization_param->valid())) {
    // This shouldn't happen with a valid request. If it does, log it and
    // re-nullopt the authorization parameters.
    ldpp_dout(dpp, 0) << "AuthorizationParameters not available" << dendl;
    authorization_param = std::nullopt;
  }

  // Perform the gRPC-specific parts of the auth* call.
  auto result = _grpc_auth(dpp, "", authorization_param, "", "", "", "", s, y, false);

  return result;
};

std::optional<std::vector<uint8_t>>
HandoffHelperImpl::get_signing_key(const DoutPrefixProvider* dpp,
    const std::string auth,
    const req_state* const s, optional_yield y)
{

  authenticator::v1::GetSigningKeyRequest req;
  req.set_transaction_id(s->trans_id);
  req.set_authorization_header(auth);

  // Get the gRPC client from under the channel lock. Hold the lock for as
  // short a time as possible.
  AuthServiceClient client {}; // Uninitialised variant - must call set_stub().
  {
    auto new_channel = get_authn_channel().get_channel();
    if (!new_channel) {
      ldpp_dout(dpp, 0) << "Unset gRPC channel" << dendl;
      return std::nullopt;
    }
    client.set_stub(new_channel);
  }
  ldpp_dout(dpp, 1) << "Sending gRPC signing key request" << dendl;
  auto result = client.GetSigningKey(req);
  if (!result.ok()) {
    ldpp_dout(dpp, 1) << "Failed to fetch signing key: " << result.error_message() << dendl;
    return std::nullopt;
  }
  ldpp_dout(dpp, 5) << "fetched signing key" << dendl;
  return std::make_optional(result.signing_key());
}

/****************************************************************************/

// verify_permission() and friends.

void HandoffHelperImpl::verify_permission_update_authz_state(const DoutPrefixProvider* dpp,
    const ExtraDataSpecification& extra_spec,
    const RGWOp* op, const req_state* s)
{
  if (extra_spec.object_key_tags()) {
    s->handoff_authz->set_object_tags_required(true);
  }
}

int HandoffHelperImpl::verify_permission(const RGWOp* op, req_state* s,
    uint64_t operation, optional_yield y)
{
  return verify_permissions(op, s, std::vector<uint64_t> { operation }, y)[0];
}

std::vector<int> HandoffHelperImpl::verify_permissions(const RGWOp* op, req_state* s,
    const std::vector<uint64_t>& operations, optional_yield y)
{
  // Construct a custom log prefix provider with some per-request state
  // information. This should make it easier to correlate logs on busy
  // servers.
  HandoffDoutStateProvider hdpp(*op, "HandoffAuthz", s);
  auto dpp = &hdpp;

  ceph_assert(s->cio != nullptr);

  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}"), __func__) << dendl;

  size_t op_count = operations.size();

  auto opt_req = PopulateAuthorizeRequest(dpp, s, operations, 0, y);
  if (!opt_req) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Failed to populate AuthorizeV2Request"), __func__) << dendl;
    return std::vector(op_count, -EACCES);
  }
  auto req = *opt_req;

  auto channel = get_authz_channel().get_channel();
  if (!channel) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Failed to fetch gRPC channel"), __func__) << dendl;
    return std::vector(op_count, -EACCES);
  }
  auto client = AuthorizerClient(channel);

  /* AuthorizeV2 request. We can submit at most two of these requests. The
   * first request will (in the first iteration of this client) never have the
   * extra_data_required field set. If the server responds with
   * AUTHORIZATION_RESULT_CODE_EXTRA_DATA_REQUIRED, we then fetch what data it asks for and
   * resubmit.
   *
   * We submit at most two requests. We don't allow loops.
   *
   * Note that this will std::move req! It gets moved to the result object.
   */
  auto result = client.AuthorizeV2(req);

  if (result.is_extra_data_required()) {

    // Dump the result at debug level.
    ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: Authorize result: "), __func__) << result << dendl;

    ExtraDataSpecification spec;
    bool seen = false;

    // result.response() has a value if the result is extra data required.
    for (const auto& answer : result.response().answers()) {
      if (answer.has_extra_data_required()) {
        spec.set_object_key_tags(answer.extra_data_required().object_key_tags());
        seen = true;
      }
    }
    ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: Extra data required: {}"),
        __func__, proto_to_JSON(spec))
                       << dendl;

    // Don't allow all-empty ExtraDataSpecification fields, this indicates a
    // problem.
    if (!seen) {
      ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Extra data required but no extra data fields specified"), __func__) << dendl;
      return std::vector(op_count, -ERR_INTERNAL_ERROR);
    }

    // Update s->handoff_authz with the extra data required. The metadata in
    // handoff_authz are used to populate the new AuthorizeV2 request.
    verify_permission_update_authz_state(dpp, spec, op, s);

    // Create a new request. I know the temptation is to try to modify the
    // old request, but that just doesn't work - we can't modify the
    // questions once they're loaded into the repeated field. Note the
    // subrequest ID is incremented. This means a new ID so we don't confuse
    // the Authorizer with duplicates.
    opt_req = PopulateAuthorizeRequest(dpp, s, operations, 1, y);
    if (!opt_req) {
      ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Failed to load extra data"), __func__) << dendl;
      return std::vector(op_count, -EACCES);
    }

    // // We only need to update the IAM environment if any extra data loads will
    // // change that environment. Currently that's not true.
    // ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: Reloading IAM environment"), __func__) << dendl;
    // PopulateAuthorizeRequestIAMEnvironment(dpp, s, req);

    // Resubmit the request with the extra data.
    ldpp_dout(dpp, 5)
        << fmt::format(FMT_STRING("{}: Resubmitting request with extra data: {}"), __func__, proto_to_JSON(req)) << dendl;
    /* Again, this will std::move the request! */
    auto req = opt_req.value();
    result = client.AuthorizeV2(req);
  }

  /* We get here after performing either a single AuthorizeV2 request, or two
   * requests if the first request required extra data. Either way, we have an
   * AuthorizerClient::AuthorizeV2Result object to interpret, and we return a
   * vector of statuses to the caller.
   */

  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: Authorize result: "), __func__) << result << dendl;

  // We do not allow EXTRA_DATA_REQUIRED to loop. If the second message sent
  // returns this status, it's a hard failure because something has gone wrong
  // - the interaction between the client and the Authorizer is broken.
  if (result.is_extra_data_required()) {
    // We're looping. Disallow this explicitly and as an internal error.
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Disallowing multiple extra data requests"), __func__) << dendl;
    return std::vector(op_count, -ERR_INTERNAL_ERROR);
  }

  // If the RPC itself failed, hard fail in the hope that a retry will succeed.
  if (result.has_status()) {
    auto status = result.status();
    ldpp_dout(dpp, 0)
        << fmt::format(FMT_STRING("{}: ERROR: Failed to authorize request: code {}: message '{}'"),
               __func__, status.error_code(), status.error_message())
        << dendl;
    return std::vector<int>(op_count, -EACCES);
  }

  // If the RPC succeeded but we got an error message, hard fail so the user
  // might retry.
  if (result.has_message()) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Failed to authorize request: {}"), __func__, result.message()) << dendl;
    return std::vector(op_count, -ERR_INTERNAL_ERROR);
  }

  // If we got here, the RPC succeeded and the response appears well-formed.
  // Return the results. These are the codes used in RGWOp classes - zero is
  // success, <0 is an error code from rgw_common.h.
  std::vector<int> result_codes;
  for (const auto& answer : result.response().answers()) {
    using namespace ::authorizer::v1;
    int retcode;
    switch (answer.code()) {
    case AUTHORIZATION_RESULT_CODE_ALLOW:
      retcode = 0;
      break;
    case AUTHORIZATION_RESULT_CODE_DENY:
      retcode = -EACCES;
      break;
    case AUTHORIZATION_RESULT_CODE_INTERNAL_ERROR:
      retcode = -ERR_INTERNAL_ERROR;
      break;
    case AUTHORIZATION_RESULT_CODE_RATE_LIMIT_EXCEEDED:
      retcode = -ERR_RATE_LIMITED;
      break;
    default:
      retcode = -ERR_INTERNAL_ERROR;
      break;
    }
    result_codes.push_back(retcode);
  }
  return result_codes;
}

/****************************************************************************/

bool AuthorizerClient::Ping(const std::string& id)
{
  using namespace ::authorizer::v1;

  ::grpc::ClientContext context;
  PingRequest req;
  auto common = req.mutable_common();
  common->set_authorization_id(id);
  PingResponse resp;

  ::grpc::Status status = stub_->Ping(&context, req, &resp);
  if (!status.ok()) {
    return false;
  }
  if (resp.common().authorization_id() != id) {
    return false;
  }
  return true;
}

void SetAuthorizationCommonTimestamp(::authorizer::v1::AuthorizationCommon* common)
{
  auto ts = common->mutable_timestamp();
  auto now = std::chrono::system_clock::now();
  auto now_ts = std::chrono::time_point_cast<std::chrono::seconds>(now);
  auto ns = std::chrono::duration_cast<std::chrono::nanoseconds>(now - now_ts);
  ts->set_seconds(std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch()).count());
  ts->set_nanos(ns.count());
}

/****************************************************************************/

//
// AuthorizeRequest message population, update, and support code.
//

/**
 * @brief Load object tags from the SAL.
 *
 * Emulate operation of rgw_iam_add_objtags() by loading object tags from the
 * SAL. Instead of placing them in the IAM environment, load them onto our map
 * for later use.
 *
 * Try to be tolerant. If we get errors from the SAL that indicate that the
 * object doesn't (yet) exist, log them but return success (indicating an
 * empty set of tags). This is to allow for the policy engine asking for
 * things we don't yet have, for example asking for tags on an object that
 * we're in the process of creating. XXX this might not be the right thing to
 * do, it might mask errors.
 *
 * @param dpp The DoutPrefixProvider.
 * @param s The req_state.
 * @param obj_tags A mutable map for the object tags.
 * @param y Optional yield (used by rgw::sal::Object::get_obj_attrs()).
 * @return int zero on success, <0 error code on failure.
 */
static int _load_objtags_from_sal(const DoutPrefixProvider* dpp, const req_state* s, objtag_map_type& obj_tags, optional_yield y)
{
  // From rgw_iam_add_objtags()
  if (!s->object) {
    ldpp_dout(dpp, 1) << fmt::format(FMT_STRING("{}: WARNING: req_state->object is null, nothing to load"), __func__) << dendl;
    return 0;
  }
  // From rgw_iam_add_objtags() second variant.
  auto& object = s->object;
  object->set_atomic();
  int ret = object->get_obj_attrs(y, dpp);
  if (ret < 0) {
    // Treat ENOENT as a special case. If we're handling the initial
    // put-object for an object key, s->object will be set but get_obj_attrs()
    // will return ENOENT.
    if (ret == -ENOENT) {
      ldpp_dout(dpp, 1) << fmt::format(FMT_STRING("{}: WARNING: get_obj_attrs() returned ENOENT, returning empty tags"), __func__) << dendl;
      return 0;
    }
    ldpp_dout(dpp, 1) << fmt::format(FMT_STRING("{}: Failed to get object attributes"), __func__) << dendl;
    return ret;
  }
  rgw::sal::Attrs attrs = object->get_attrs();
  auto tags = attrs.find(RGW_ATTR_TAGS);
  if (tags != attrs.end()) {
    // From rgw_iam_add_tags_from_bl()
    RGWObjTags tagset;
    try {
      auto bliter = tags->second.cbegin();
      tagset.decode(bliter);
    } catch (buffer::error& err) {
      ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: caught buffer::error, couldn't decode TagSet"), __func__) << dendl;
      return -EIO;
    }
    // Load our map instead of the IAM environment.
    for (const auto& tag : tagset.get_tags()) {
      obj_tags[tag.first] = tag.second;
    }
  }
  return 0;
}

int PopulateExtraDataObjectTags(const DoutPrefixProvider* dpp, const req_state* s,
    ::authorizer::v1::ExtraDataSpecification* extra_data_provided,
    ::authorizer::v1::ExtraData* extra_data, optional_yield y, std::optional<load_object_tags_function> alt_load)
{
  // First, load data from the SAL, or from wherever else we need to load
  // it.
  objtag_map_type obj_tags;
  int ret;

  if (alt_load) {
    ret = (*alt_load)(dpp, s, obj_tags, y);
  } else {
    ret = _load_objtags_from_sal(dpp, s, obj_tags, y);
  }
  if (ret < 0) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: Failed to load object tags: error ret"), __func__, ret) << dendl;
    return ret;
  }
  extra_data_provided->set_object_key_tags(true); // This is always true, even if there are no tags.
  if (!obj_tags.empty()) {
    auto mokt = extra_data->mutable_object_key_tags();
    for (const auto& kv : obj_tags) {
      mokt->emplace(kv.first, kv.second);
    }
  }
  return 0;
}

int PopulateAuthorizeRequestLoadExtraData(const DoutPrefixProvider* dpp, req_state* s,
    ::authorizer::v1::ExtraDataSpecification* extra_spec, ::authorizer::v1::ExtraData* extra_data,
    optional_yield y, std::optional<load_object_tags_function> alt_load)
{
  using namespace ::authorizer::v1;
  if (!s->handoff_authz) {
    ldpp_dout(dpp, 0) << fmt::format(FMT_STRING("{}: ERROR: req_state->handoff_authz cannot be null"), __func__) << dendl;
    return -ERR_INTERNAL_ERROR;
  }
  // Load the data once.
  auto state = *s->handoff_authz;
  if (state.object_tags_required()) {
    int ret = PopulateExtraDataObjectTags(dpp, s, extra_spec, extra_data, y, alt_load);
    if (ret < 0) {
      return ret;
    }
  }
  return 0;
}

void PopulateAuthorizeRequestIAMEnvironment(const DoutPrefixProvider* dpp,
    req_state* s, ::authorizer::v1::AuthorizeV2Question* question)
{
  // s->env is an rgw::IAM::Environment -> std::multimap<std::string,
  // std::string>. We need to translate that into a protobuf-compatible type,
  // as protobuf has no native multimap. It appears the standard is to have a
  // map of repeated fields, which is what we'll do here.
  //
  // std::multimap has a weird API, and whilst we could work with it directly,
  // the following feels clearer to me.
  //
  // First convert the multimap into an flat_map<string, vector<string>>,
  // which looks exactly like the protobuf type. These are small maps, so
  // flat_map makes perfect sense here.
  boost::container::flat_map<std::string, std::vector<std::string>> env_map;
  for (const auto& kv : s->env) {
    auto key = kv.first;
    auto value = kv.second;
    env_map[key].emplace_back(value);
  }
  // Then load std::unordered_map<std::string, std::vector<std::string>> into
  // the protobuf in a very natural way.
  auto env = question->mutable_environment();
  // Start from scratch. This makes more sense if you consider the case where
  // we're resubmitting a request with extra data. This is a multimap, so
  // loading new values will just duplicate everything that isn't new.
  env->clear();

  for (const auto& kv : env_map) {
    AuthorizeV2Question::IAMMapEntry entry;
    for (const auto& v : kv.second) {
      entry.add_values(v);
    }
    env->emplace(kv.first, entry);
  }
}

std::optional<::authorizer::v1::AuthorizeV2Request> PopulateAuthorizeRequest(const DoutPrefixProvider* dpp,
    req_state* s, std::vector<uint64_t> operations, uint32_t subrequest_index, optional_yield y,
    std::optional<load_object_tags_function> alt_load)
{
  using namespace ::authorizer::v1;
  ceph_assert(s->handoff_authz != nullptr);

  // First check for mandatory fields.

  // We'll use RGW's trans_id as the authorization_id value.
  if (s->trans_id.empty()) {
    ldpp_dout(dpp, 0) << "{}: ERROR: req_state->trans_id cannot be empty" << dendl;
    return std::nullopt;
  }
  std::string trans_id = s->trans_id;
  auto& suffix = s->handoff_authz->trans_id_suffix();
  if (suffix) {
    trans_id += "-" + *suffix;
  }
  ldpp_dout(dpp, 20) << fmt::format(FMT_STRING("{}: trans_id={}"), __func__, trans_id) << dendl;

  // If extra data are required, load them first. We can't mutate the
  // questions loaded into the request later.
  ExtraDataSpecification extra_spec;
  ExtraData extra_data;
  if (s->handoff_authz->extra_data_required()) {
    auto ret = PopulateAuthorizeRequestLoadExtraData(dpp, s, &extra_spec, &extra_data, y, alt_load);
    if (ret < 0) {
      return std::nullopt;
    }
  }

  AuthorizeV2Request req;

  for (size_t n = 0; n < operations.size(); n++) {
    auto operation = operations[n];
    // Check the opcode. This is a uint64_t in RGW, but an enum in the protobuf.
    auto opcode = iam_s3_to_grpc_opcode(operation);
    if (!opcode.has_value()) {
      ldpp_dout(dpp, 0)
          << fmt::format(FMT_STRING("{}: ERROR: Unable to map unknown opcode value {} to gRPC enum ::authorize::v1::S3Opcode"), __func__, operation)
          << dendl;
      return std::nullopt;
    }

    // We should have everything we need. Construct and populate the request.

    auto question = req.add_questions();
    // The AuthorizationCommon submessage.
    auto common = question->mutable_common();

    // Different trans ID for each question.
    // XXX this needs be modifyable for e-d requests.
    common->set_authorization_id(fmt::format(FMT_STRING("{}-{}-{}"), trans_id, n, subrequest_index));
    SetAuthorizationCommonTimestamp(common);
    question->set_opcode(*opcode);

    // State fields from the HandoffAuthzState object.
    auto state = s->handoff_authz.get(); // Naked pointer is safe here.
    question->set_canonical_user_id(state->canonical_user_id());
    question->set_user_arn(state->user_arn());
    if (state->assuming_user_arn()) {
      question->set_assuming_user_arn(state->assuming_user_arn().value());
    }
    question->set_account_arn(state->account_arn());
    question->set_bucket_name(state->bucket_name());
    question->set_object_key_name(state->object_key_name());

    // Include query parameters.
    auto qparam = question->mutable_query_parameters();
    for (const auto& kv : s->info.args.get_params()) {
      qparam->emplace(kv.first, kv.second);
    }

    // Save all the HTTP headers starting with 'x_amz_'.
    auto awz_headers = question->mutable_x_amz_headers();
    ceph_assert(s->cio != nullptr); // Give a helpful error to unit tests.
    for (const auto& kv : s->cio->get_env().get_map()) {
      std::string key = kv.first;
      // HTTP headers are uppercased and have hyphens replaced with underscores.
      if (ba::starts_with(key, "HTTP_X_AMZ_")) {
        key = key.substr(5);
        ba::replace_all(key, "_", "-");
        ba::to_lower(key);
        awz_headers->emplace(key, kv.second);
      }
    }

    // Load the IAM environment into the request.
    PopulateAuthorizeRequestIAMEnvironment(dpp, s, question);

    // Additional fields from the request. Be careful! Fields here can be
    // uninitialised, you must check for null pointers.
    // None yet.

    // Populate all questions with copies of the extra data and spec.
    if (extra_spec.object_key_tags()) {
      question->mutable_extra_data_provided()->CopyFrom(extra_spec);
      question->mutable_extra_data()->CopyFrom(extra_data);
    }
  }

  ldpp_dout(dpp, 20) << __func__ << ": " << req << dendl;
  return req;
}

/****************************************************************************/

AuthorizerClient::AuthorizeResult AuthorizerClient::AuthorizeV2(AuthorizeV2Request& req)
{
  using namespace ::authorizer::v1;

  ::grpc::ClientContext context;
  AuthorizeV2Response resp;

  ::grpc::Status status = stub_->AuthorizeV2(&context, req, &resp);
  if (status.ok()) {
    // Check the response structure. We need the right number of answers, and
    // the right authorization IDs in the right order.
    if (resp.answers_size() != req.questions_size()) {
      return AuthorizeResult(req, resp, "answer count mismatch");
    }
    // If only C++20 ranges didn't suck. This is a classic zip case.
    for (auto n = 0; n < req.questions_size(); n++) {
      if (req.questions(n).common().authorization_id() != resp.answers(n).common().authorization_id()) {
        return AuthorizeResult(req, resp, "question/answer ID mismatch");
      }
    }
    // We need to check the return code of each answer. If any of them are not
    // 'Allow', we'll return an error. A caller that sends multiple requests
    // will have to check each one.
    for (const auto& answer : resp.answers()) {
      if (answer.code() != AuthorizationResultCode::AUTHORIZATION_RESULT_CODE_ALLOW) {
        return AuthorizeResult(false, req, resp);
      }
    }

    // All messages returned ALLOW, total success.
    return AuthorizeResult(true, req, resp);
  }
  // Return standard error failure type if there was a problem with the actual
  // RPC call.
  return AuthorizeResult(status);
}

bool AuthorizerClient::AuthorizeResult::is_extra_data_required() const
{
  using namespace ::authorizer::v1;
  // There's no response (or any answers) to interrogate for extra data
  // requirements.
  if (!has_response() || response().answers_size() == 0) {
    return false;
  }
  // The RPC itself failed, the response shouldn't be checked.
  if (has_status() && !status().ok()) {
    return false;
  }
  for (const auto& answer : response().answers()) {
    if (answer.code() == ::authorizer::v1::AUTHORIZATION_RESULT_CODE_EXTRA_DATA_REQUIRED) {
      return true;
    }
  }
  return false;
}

/****************************************************************************/

// ostream operators for authz protobuf messages.

std::string fmt_AuthorizeV2Request(const ::authorizer::v1::AuthorizeV2Request& res)
{
  using namespace google::protobuf::util;
  JsonPrintOptions options;
  options.always_print_primitive_fields = true;
  std::string out;
  auto status = google::protobuf::util::MessageToJsonString(res, &out, options);
  if (status.ok()) {
    return out;
  } else {
    return fmt::format(FMT_STRING("Error formatting protobuf as JSON: {}"), status.ToString());
  }
}

// Some explicit instantiations for the proto_to_JSON template.
template std::string proto_to_JSON<authorizer::v1::AuthorizeV2Request>(const authorizer::v1::AuthorizeV2Request& res);
template std::string proto_to_JSON<authorizer::v1::AuthorizeV2Response>(const authorizer::v1::AuthorizeV2Response& res);
template std::string proto_to_JSON<authorizer::v1::ExtraData>(const authorizer::v1::ExtraData& res);
template std::string proto_to_JSON<authorizer::v1::ExtraDataSpecification>(const authorizer::v1::ExtraDataSpecification& res);

std::ostream& operator<<(std::ostream& os, const ::authorizer::v1::AuthorizeV2Request& res)
{
  // os << fmt_AuthorizeV2Request(res);
  os << proto_to_JSON<::authorizer::v1::AuthorizeV2Request>(res);
  return os;
}

std::ostream& operator<<(std::ostream& os, const ::authorizer::v1::AuthorizeV2Response& res)
{
  os << proto_to_JSON<::authorizer::v1::AuthorizeV2Response>(res);
  return os;
}

std::ostream& operator<<(std::ostream& os, const ::authorizer::v1::ExtraData& res)
{
  os << proto_to_JSON<::authorizer::v1::ExtraData>(res);
  return os;
}

std::ostream& operator<<(std::ostream& os, const ::authorizer::v1::ExtraDataSpecification& res)
{
  os << proto_to_JSON<::authorizer::v1::ExtraDataSpecification>(res);
  return os;
}

/****************************************************************************/

// ostream operator for AuthorizerClient::AuthorizeResult.

std::ostream& operator<<(std::ostream& os, const AuthorizerClient::AuthorizeResult& res)
{
  os << "AuthorizeResult(success=" << res.ok() << ", request=";
  if (res.has_request()) {
    os << res.request();
  } else {
    os << "NONE";
  }
  os << ", response=";
  if (res.has_response()) {
    os << res.response();
  } else {
    os << "NONE";
  }
  os << ", grpc::status=";
  if (res.has_status()) {
    os << "(code=" << res.status().error_code() << ", message='" << res.status().error_message() << "')";
  } else {
    os << "NONE";
  }
  os << ")";

  return os;
}

/****************************************************************************/

} // namespace rgw
